{"componentChunkName":"component---src-pages-troubleshooting-invoke-a-function-mdx","path":"/troubleshooting/invoke-a-function/","result":{"pageContext":{"frontmatter":{"title":"Test an action directly in IBM Cloud Functions","description":"How to test an action directly by using the IBM Cloud Functions service"},"relativePagePath":"/troubleshooting/invoke-a-function.mdx","titleType":"page","MdxNode":{"id":"5e2070ce-a97f-5d7f-8072-c4457969d2c1","children":[],"parent":"36ba0076-4b55-576d-8233-72172933bff2","internal":{"content":"---\ntitle: Test an action directly in IBM Cloud Functions\ndescription: How to test an action directly by using the IBM Cloud Functions service\n---\n\nYou might want to modify the existing sample Javascript code that is provided to call your own custom REST APIs or display different fields in the chatbot based on your own requirements.\nYou will then want to test that your action works as expected.\n\nAs part of the IBM Cloud Functions service, you can directly invoke each of the actions you created and view the expected JSON or HTML format that is returned from each request.\nAlthough the steps outlined on this page detail how to test one of the sample actions provided, the same concepts can be used to test your own Cloud Functions actions.\n\n## Testing the sample actions\n\nFurther details about the sample actions provided can be found in the [Cloud Function overview](/functions/cloud-functions-overview) section.\n\nThe following list summarizes the steps to test an action using the IBM Cloud Functions service:\n\n- Generate a JWT in SPM and copy the value for use as an authorization parameter when invoking the action.\n- Retrieve values for the other parameters you want to send. Different flows will be invoked depending on the parameters used.\n- In the IBM Cloud Functions service, add all parameters to a JSON object.\n- Invoke the action and view the response.\n\nFurther details for each of these steps are in the following sections.\n\nYou can test the `caseworker` action, which will in turn invoke one of the `person` or `verifications` actions under the hood, or you can test either of the `person` or `verifications` actions directly.\n\n### How to generate an authorization token to use when invoking the action\n\nBefore you invoke any of the actions, you need to get a valid JWT to add as an authorization parameter.\nThis is required for the action to be able to access the underlying REST API in the SPM server.\n\nThe following list outlines how to retrieve a valid JWT from SPM to use when invoking the actions:\n\n1. In your SPM application, log in with the user that you enabled to be displayed as the virtual assistant for example, `caseworker`.\n2. From your browser > `Developer Tools`, open the `Network` section and select the clear icon.\n3. Open the `Virtual Assistant` web chat and select `Outstanding verifications by case`.\n4. By viewing the request headers in the `Network` section for the request to Watson Assistant, you can copy the value for the `authorization` request header. You do not need to include the 'Bearer' scheme, just the value of the token.\n\n![Authorization](../../images/authorization.png)\n\n<Caption fullWidth>\n\n*Figure 1: Authorization.*\n\n</Caption>\n\n### Determine parameters for the flow you want to test and add to a JSON object\n\nThe Cloud Function action accepts parameters as a JSON object only. Determine the parameters you need to test the required action and flow. Add them, along with the appropriate authorization parameter, to a JSON object.\n\n#### Parameters and flows for the `caseworker` action\n\nThe following table lists the possible flows through the `caseworker` action that you can test and the parameters required to invoke the flow.\nIn addition, a ```__ow_headers``` parameter containing a nested JSON object with a valid authorization token value (without the 'Bearer' scheme) is required.\n\n| Flow | Parameters to invoke the flow | Parameter details | Example of parameters in JSON format |\n| :-------------- | :------ |  :----------- | :----------- |\n|1. Retrieve a person's details by using one of their identifiers | identificationID<br/>identificationIDType | You can retrieve the `identificationID`, which is also known as the `alternateID`, from a person's evidence page in SPM. <br/><br/> The `identificationIDType` parameter is an optional string parameter. Based on the sample code, the value must be one of `passport`, `drivers licence` or `SSN`. Under the hood, the string gets mapped to a corresponding code from the ConcernRoleAlternateID codetable in SPM, which is required by the underlying REST API that the action invokes. Any other string value will get mapped to a default code of `CA7`. If this parameter is not used, the default code of `CA7` will be used. | ```{\"identificationID\":20001, \"identificationIDType\":\"Passport\", \"__ow_headers\":{\"authorization\":\"<token_value>\"}}```|\n|2. Retrieve a case and primary client's details by using the case reference number | caseReference | You can retrieve the case reference number when you view the Integrated Case in SPM.| ```{\"personID\" : \"564543246789865439\", \"__ow_headers\":{\"authorization\":\"<token_value>\"}}```|\n|3. Retrieve verification details for a person| personID | You can retrieve the `personID`, which is also known as the `concernRoleID`, from the person home page in SPM if you have the SPM UI Inspector tool configured, or from the `ConcernRole` database table.| ```{\"caseReference\" : \"55555\", \"__ow_headers\":{\"authorization\":\"<token_value>\"}}```|\n|4. Retrieve verification details for a case | caseID | You can retrieve the `caseID` from the case home page if you have the SPM UI Inspector tool configured, or from the `CaseHeader` database table.| ```{\"caseID\" : \"8362543246789865439\", \"__ow_headers\":{\"authorization\":\"<token_value>\"}}```|\n\n#### Parameters and flows for the `person` action\n\nThe following table lists the flows through the `person` action that you can test and the parameters required to invoke the flow. A valid ```authorization``` parameter is required in each action.\nNote that the format of this parameter differs slightly from the `caseworker` action.\n\n| Flow | Parameters to invoke the flow | Parameter details | Example of parameters in JSON format |\n| :-------------- | :------ |  :----------- | :----------- |\n|1. Retrieve a person's details by using one of their identifiers | identificationID<br/>identificationIDType |You can retrieve the `identificationID`, which is also known as the `alternateID`, from a person's evidence page in SPM. <br/><br/> The `identificationIDType` parameter is an optional string parameter. Based on the sample code, the value must be one of `passport`, `drivers licence` or `SSN`. Under the hood, the string gets mapped to a corresponding code from the ConcernRoleAlternateID codetable in SPM, which is required by the underlying REST API that the action invokes. Any other string value will get mapped to a default code of `CA7`. If this parameter is not used, the default code of `CA7` will be used. | ```{\"identificationID\":20001, \"identificationIDType\":\"Passport\", \"authorization\":\"Bearer <token_value>\"}```|\n|2. Retrieve a case and primary client's details by using the case reference number | caseReference | You can retrieve the case reference number when you view the Integrated Case in SPM.| ```{\"personID\" : \"564543246789865439\", \"authorization\":\"Bearer <token_value>\"}```|\n\n#### Parameters and flows for the `verifications` action\n\nThe following table lists the flows through the `verifications` action that you can test and the parameters required to invoke the flow. A valid ```authorization``` parameter is required in each action.\nNote that the format of this parameter differs slightly from the `caseworker` action.\n\n| Flow | Parameters to invoke the flow | Parameter details | Example of parameters in JSON format |\n| :-------------- | :------ |  :----------- | :----------- |\n|1. Retrieve verification details for a person| personID | You can retrieve the `personID`, which is also known as the `concernRoleID`, from the person home page in SPM if you have the SPM UI Inspector tool configured, or from the `ConcernRole` database table.| ```{\"caseReference\" : \"55555\", \"\"authorization\":\"Bearer <token_value>\"}```|\n|2. Retrieve verification details for a case | caseID | You can retrieve the `caseID` from the case home page if you have the SPM UI tool configured, or from the `CaseHeader` database table.| ```{\"caseID\" : \"8362543246789865439\", \"authorization\":\"Bearer <token_value>\"}```|\n\n## Invoke the Cloud Function action with parameters\n\n1. From `Functions` > `Actions` > `curam-rest` package, select the action to be tested.\n2. Click the `Invoke with parameters` button.\n3. From the `Change Action Input` window, enter a JSON object containing the parameters you want to send and click `Apply`.\n\n![Invoke-with-parameters](../../images/Invoke-with-parameters.png)\n\n<Caption fullWidth>\n\n*Figure 2: Invoke with parameters.*\n\n</Caption>\n4. Click the `Invoke` button.\n\n## Sample expected results\n\nThe following figures include some sample results retrieved by invoking the different actions based on sample data that is configured in the application.\n\n![Person-results-by-identification-id](../../images/Person-results-by-identification-id.png)\n\n<Caption fullWidth>\n\n*Figure 3: Person results by using the identification number.*\n\n</Caption>\n\n![Person-results-by-case-reference](../../images/Person-results-by-case-reference.png)\n\n<Caption fullWidth>\n\n*Figure 4: Person results by using the case reference number.*\n\n</Caption>\n\n![Verification-results-by-person-id](../../images/Verification-results-by-person-id.png)\n\n<Caption fullWidth>\n\n*Figure 5: Verification results by using the person number.*\n\n</Caption>\n\n![Verification-results-by-case-id](../../images/Verification-results-by-case-id.png)\n\n<Caption fullWidth>\n\n*Figure 6: Verification results by using the case number.*\n\n</Caption>\n","type":"Mdx","contentDigest":"5f0d4c3f8a48b89bd586170e9c16ad86","owner":"gatsby-plugin-mdx","counter":157},"frontmatter":{"title":"Test an action directly in IBM Cloud Functions","description":"How to test an action directly by using the IBM Cloud Functions service"},"exports":{},"rawBody":"---\ntitle: Test an action directly in IBM Cloud Functions\ndescription: How to test an action directly by using the IBM Cloud Functions service\n---\n\nYou might want to modify the existing sample Javascript code that is provided to call your own custom REST APIs or display different fields in the chatbot based on your own requirements.\nYou will then want to test that your action works as expected.\n\nAs part of the IBM Cloud Functions service, you can directly invoke each of the actions you created and view the expected JSON or HTML format that is returned from each request.\nAlthough the steps outlined on this page detail how to test one of the sample actions provided, the same concepts can be used to test your own Cloud Functions actions.\n\n## Testing the sample actions\n\nFurther details about the sample actions provided can be found in the [Cloud Function overview](/functions/cloud-functions-overview) section.\n\nThe following list summarizes the steps to test an action using the IBM Cloud Functions service:\n\n- Generate a JWT in SPM and copy the value for use as an authorization parameter when invoking the action.\n- Retrieve values for the other parameters you want to send. Different flows will be invoked depending on the parameters used.\n- In the IBM Cloud Functions service, add all parameters to a JSON object.\n- Invoke the action and view the response.\n\nFurther details for each of these steps are in the following sections.\n\nYou can test the `caseworker` action, which will in turn invoke one of the `person` or `verifications` actions under the hood, or you can test either of the `person` or `verifications` actions directly.\n\n### How to generate an authorization token to use when invoking the action\n\nBefore you invoke any of the actions, you need to get a valid JWT to add as an authorization parameter.\nThis is required for the action to be able to access the underlying REST API in the SPM server.\n\nThe following list outlines how to retrieve a valid JWT from SPM to use when invoking the actions:\n\n1. In your SPM application, log in with the user that you enabled to be displayed as the virtual assistant for example, `caseworker`.\n2. From your browser > `Developer Tools`, open the `Network` section and select the clear icon.\n3. Open the `Virtual Assistant` web chat and select `Outstanding verifications by case`.\n4. By viewing the request headers in the `Network` section for the request to Watson Assistant, you can copy the value for the `authorization` request header. You do not need to include the 'Bearer' scheme, just the value of the token.\n\n![Authorization](../../images/authorization.png)\n\n<Caption fullWidth>\n\n*Figure 1: Authorization.*\n\n</Caption>\n\n### Determine parameters for the flow you want to test and add to a JSON object\n\nThe Cloud Function action accepts parameters as a JSON object only. Determine the parameters you need to test the required action and flow. Add them, along with the appropriate authorization parameter, to a JSON object.\n\n#### Parameters and flows for the `caseworker` action\n\nThe following table lists the possible flows through the `caseworker` action that you can test and the parameters required to invoke the flow.\nIn addition, a ```__ow_headers``` parameter containing a nested JSON object with a valid authorization token value (without the 'Bearer' scheme) is required.\n\n| Flow | Parameters to invoke the flow | Parameter details | Example of parameters in JSON format |\n| :-------------- | :------ |  :----------- | :----------- |\n|1. Retrieve a person's details by using one of their identifiers | identificationID<br/>identificationIDType | You can retrieve the `identificationID`, which is also known as the `alternateID`, from a person's evidence page in SPM. <br/><br/> The `identificationIDType` parameter is an optional string parameter. Based on the sample code, the value must be one of `passport`, `drivers licence` or `SSN`. Under the hood, the string gets mapped to a corresponding code from the ConcernRoleAlternateID codetable in SPM, which is required by the underlying REST API that the action invokes. Any other string value will get mapped to a default code of `CA7`. If this parameter is not used, the default code of `CA7` will be used. | ```{\"identificationID\":20001, \"identificationIDType\":\"Passport\", \"__ow_headers\":{\"authorization\":\"<token_value>\"}}```|\n|2. Retrieve a case and primary client's details by using the case reference number | caseReference | You can retrieve the case reference number when you view the Integrated Case in SPM.| ```{\"personID\" : \"564543246789865439\", \"__ow_headers\":{\"authorization\":\"<token_value>\"}}```|\n|3. Retrieve verification details for a person| personID | You can retrieve the `personID`, which is also known as the `concernRoleID`, from the person home page in SPM if you have the SPM UI Inspector tool configured, or from the `ConcernRole` database table.| ```{\"caseReference\" : \"55555\", \"__ow_headers\":{\"authorization\":\"<token_value>\"}}```|\n|4. Retrieve verification details for a case | caseID | You can retrieve the `caseID` from the case home page if you have the SPM UI Inspector tool configured, or from the `CaseHeader` database table.| ```{\"caseID\" : \"8362543246789865439\", \"__ow_headers\":{\"authorization\":\"<token_value>\"}}```|\n\n#### Parameters and flows for the `person` action\n\nThe following table lists the flows through the `person` action that you can test and the parameters required to invoke the flow. A valid ```authorization``` parameter is required in each action.\nNote that the format of this parameter differs slightly from the `caseworker` action.\n\n| Flow | Parameters to invoke the flow | Parameter details | Example of parameters in JSON format |\n| :-------------- | :------ |  :----------- | :----------- |\n|1. Retrieve a person's details by using one of their identifiers | identificationID<br/>identificationIDType |You can retrieve the `identificationID`, which is also known as the `alternateID`, from a person's evidence page in SPM. <br/><br/> The `identificationIDType` parameter is an optional string parameter. Based on the sample code, the value must be one of `passport`, `drivers licence` or `SSN`. Under the hood, the string gets mapped to a corresponding code from the ConcernRoleAlternateID codetable in SPM, which is required by the underlying REST API that the action invokes. Any other string value will get mapped to a default code of `CA7`. If this parameter is not used, the default code of `CA7` will be used. | ```{\"identificationID\":20001, \"identificationIDType\":\"Passport\", \"authorization\":\"Bearer <token_value>\"}```|\n|2. Retrieve a case and primary client's details by using the case reference number | caseReference | You can retrieve the case reference number when you view the Integrated Case in SPM.| ```{\"personID\" : \"564543246789865439\", \"authorization\":\"Bearer <token_value>\"}```|\n\n#### Parameters and flows for the `verifications` action\n\nThe following table lists the flows through the `verifications` action that you can test and the parameters required to invoke the flow. A valid ```authorization``` parameter is required in each action.\nNote that the format of this parameter differs slightly from the `caseworker` action.\n\n| Flow | Parameters to invoke the flow | Parameter details | Example of parameters in JSON format |\n| :-------------- | :------ |  :----------- | :----------- |\n|1. Retrieve verification details for a person| personID | You can retrieve the `personID`, which is also known as the `concernRoleID`, from the person home page in SPM if you have the SPM UI Inspector tool configured, or from the `ConcernRole` database table.| ```{\"caseReference\" : \"55555\", \"\"authorization\":\"Bearer <token_value>\"}```|\n|2. Retrieve verification details for a case | caseID | You can retrieve the `caseID` from the case home page if you have the SPM UI tool configured, or from the `CaseHeader` database table.| ```{\"caseID\" : \"8362543246789865439\", \"authorization\":\"Bearer <token_value>\"}```|\n\n## Invoke the Cloud Function action with parameters\n\n1. From `Functions` > `Actions` > `curam-rest` package, select the action to be tested.\n2. Click the `Invoke with parameters` button.\n3. From the `Change Action Input` window, enter a JSON object containing the parameters you want to send and click `Apply`.\n\n![Invoke-with-parameters](../../images/Invoke-with-parameters.png)\n\n<Caption fullWidth>\n\n*Figure 2: Invoke with parameters.*\n\n</Caption>\n4. Click the `Invoke` button.\n\n## Sample expected results\n\nThe following figures include some sample results retrieved by invoking the different actions based on sample data that is configured in the application.\n\n![Person-results-by-identification-id](../../images/Person-results-by-identification-id.png)\n\n<Caption fullWidth>\n\n*Figure 3: Person results by using the identification number.*\n\n</Caption>\n\n![Person-results-by-case-reference](../../images/Person-results-by-case-reference.png)\n\n<Caption fullWidth>\n\n*Figure 4: Person results by using the case reference number.*\n\n</Caption>\n\n![Verification-results-by-person-id](../../images/Verification-results-by-person-id.png)\n\n<Caption fullWidth>\n\n*Figure 5: Verification results by using the person number.*\n\n</Caption>\n\n![Verification-results-by-case-id](../../images/Verification-results-by-case-id.png)\n\n<Caption fullWidth>\n\n*Figure 6: Verification results by using the case number.*\n\n</Caption>\n","fileAbsolutePath":"/home/runner/work/spm-chatbot/spm-chatbot/cookbook/src/pages/troubleshooting/invoke-a-function.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}